import os
from telegram import Update, ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# TOKEN env variable ‡§∏‡•á ‡§≤‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ
TOKEN = os.environ["TOKEN"]

# Admin ‡§ï‡§æ Telegram User ID (‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ User ID)
ADMIN_USER_ID = "7850701411"  # Admin ‡§ï‡§æ Telegram ID ‡§Ø‡§π‡§æ‡§Ç ‡§°‡§æ‡§≤‡•ã

# Image URL (‡§§‡•á‡§∞‡§æ QR ‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§á‡§Æ‡•á‡§ú)
IMAGE_URL = "qr.png"  # üëà ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡•Ä ‡§á‡§Æ‡•á‡§ú ‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§°‡§æ‡§≤

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "<b>Kindly Pay ‚Çπ99 And Submit Screenshot</b>\n\n"
        "1. Phone Pe\n"
        "2. Paytm\n"
        "3. G Pay\n"
        "4. Spotify Premium\n\n"
    )

    # ‡§á‡§Æ‡•á‡§ú ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§≠‡•á‡§ú‡•ã (caption ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç)
    await update.message.reply_photo(photo=IMAGE_URL, caption=message, parse_mode="HTML")

# ‡§ú‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§≠‡•á‡§ú‡•á, ‡§§‡•ã ‡§â‡§∏‡•á admin ‡§ï‡•ã ‡§≠‡•á‡§ú‡•ã
async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ‡§Ø‡•Ç‡§ú‡§∞ ‡§®‡•á ‡§ú‡•ã ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§≠‡•á‡§ú‡§æ ‡§π‡•à, ‡§â‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡§æ
    file = await update.message.photo[-1].get_file()

    # ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç (‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï)
    file_url = file.file_path

    # Admin ‡§ï‡•ã ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§≠‡•á‡§ú‡•ã
    admin_message = f"New screenshot received!\n\nFile URL: {file_url}\n\nUser: {update.message.from_user.username}"
    await context.bot.send_message(chat_id=ADMIN_USER_ID, text=admin_message)

    # Admin ‡§ï‡•ã approval/rejection ‡§ï‡•á ‡§ë‡§™‡•ç‡§∂‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç
    buttons = [
        [
            ("Approve", "approve"),  # Approve ‡§¨‡§ü‡§®
            ("Reject", "reject")     # Reject ‡§¨‡§ü‡§®
        ]
    ]
    await context.bot.send_message(
        chat_id=ADMIN_USER_ID,
        text="Please approve or reject this payment screenshot:",
        reply_markup={"inline_keyboard": buttons}
    )

# Admin ‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ approve/reject ‡§ï‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action = query.data

    # Action ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§≠‡•á‡§ú‡•á‡§Ç
    if action == "approve":
        await query.answer("Payment Approved! üéâ")
        await query.message.reply_text("The payment screenshot has been approved.")
    elif action == "reject":
        await query.answer("Payment Rejected! üö´")
        await query.message.reply_text("The payment screenshot has been rejected.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # Command handler ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    app.add_handler(CommandHandler("start", start))

    # ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§ï‡§æ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    app.add_handler(MessageHandler(filters.PHOTO, handle_screenshot))

    # ‡§¨‡§ü‡§® ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§™‡§∞ handler ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    app.add_handler(MessageHandler(filters.CallbackQuery, button_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
